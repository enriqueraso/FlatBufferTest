# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatBuffers

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class OverallLikelyException4Union(object):
    NONE = 0
    DetailedException2 = 1
    DetailedException4 = 2


class DetailedException3Vector(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DetailedException3Vector()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDetailedException3Vector(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # DetailedException3Vector
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DetailedException3Vector
    def AType(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # DetailedException3Vector
    def ATypeAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # DetailedException3Vector
    def ATypeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DetailedException3Vector
    def ATypeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # DetailedException3Vector
    def A(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Union(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # DetailedException3Vector
    def ALength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DetailedException3Vector
    def AIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def DetailedException3VectorStart(builder): builder.StartObject(2)
def DetailedException3VectorAddAType(builder, aType): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(aType), 0)
def DetailedException3VectorStartATypeVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def DetailedException3VectorAddA(builder, a): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(a), 0)
def DetailedException3VectorStartAVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def DetailedException3VectorEnd(builder): return builder.EndObject()


class DetailedException4(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DetailedException4()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDetailedException4(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # DetailedException4
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DetailedException4
    def _Code(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # DetailedException4
    def _Message(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def DetailedException4Start(builder): builder.StartObject(2)
def DetailedException4Add_Code(builder, _Code): builder.PrependUint64Slot(0, _Code, 0)
def DetailedException4Add_Message(builder, _Message): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(_Message), 0)
def DetailedException4End(builder): return builder.EndObject()


class DetailedException4Vector(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DetailedException4Vector()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDetailedException4Vector(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # DetailedException4Vector
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DetailedException4Vector
    def AType(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # DetailedException4Vector
    def ATypeAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # DetailedException4Vector
    def ATypeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DetailedException4Vector
    def ATypeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # DetailedException4Vector
    def A(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Union(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # DetailedException4Vector
    def ALength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DetailedException4Vector
    def AIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # DetailedException4Vector
    def B(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = DetailedException4()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DetailedException4Vector
    def BLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DetailedException4Vector
    def BIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

def DetailedException4VectorStart(builder): builder.StartObject(3)
def DetailedException4VectorAddAType(builder, aType): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(aType), 0)
def DetailedException4VectorStartATypeVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def DetailedException4VectorAddA(builder, a): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(a), 0)
def DetailedException4VectorStartAVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def DetailedException4VectorAddB(builder, b): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(b), 0)
def DetailedException4VectorStartBVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def DetailedException4VectorEnd(builder): return builder.EndObject()


class DetailedException1Vector(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DetailedException1Vector()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDetailedException1Vector(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # DetailedException1Vector
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DetailedException1Vector
    def A(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 8
            obj = DetailedException1()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DetailedException1Vector
    def ALength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DetailedException1Vector
    def AIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def DetailedException1VectorStart(builder): builder.StartObject(1)
def DetailedException1VectorAddA(builder, a): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(a), 0)
def DetailedException1VectorStartAVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def DetailedException1VectorEnd(builder): return builder.EndObject()


class DetailedException2Vector(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DetailedException2Vector()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDetailedException2Vector(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # DetailedException2Vector
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DetailedException2Vector
    def A(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = DetailedException2()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DetailedException2Vector
    def ALength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DetailedException2Vector
    def AIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def DetailedException2VectorStart(builder): builder.StartObject(1)
def DetailedException2VectorAddA(builder, a): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(a), 0)
def DetailedException2VectorStartAVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def DetailedException2VectorEnd(builder): return builder.EndObject()


