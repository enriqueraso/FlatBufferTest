// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_STRUCTANDTABLE_OMTLS_FLATBUFFERS_H_
#define FLATBUFFERS_GENERATED_STRUCTANDTABLE_OMTLS_FLATBUFFERS_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 3,
             "Non-compatible flatbuffers version included");

namespace OMTLS {
namespace FlatBuffers {

struct DetailedException1;

struct DetailedException2;
struct DetailedException2Builder;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(8) DetailedException1 FLATBUFFERS_FINAL_CLASS {
 private:
  uint64_t _exceptionValue_;

 public:
  DetailedException1()
      : _exceptionValue_(0) {
  }
  DetailedException1(uint64_t __exceptionValue)
      : _exceptionValue_(::flatbuffers::EndianScalar(__exceptionValue)) {
  }
  uint64_t _exceptionValue() const {
    return ::flatbuffers::EndianScalar(_exceptionValue_);
  }
};
FLATBUFFERS_STRUCT_END(DetailedException1, 8);

struct DetailedException2 FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef DetailedException2Builder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT__EXCEPTIONVALUE = 4
  };
  const ::flatbuffers::String *_exceptionValue() const {
    return GetPointer<const ::flatbuffers::String *>(VT__EXCEPTIONVALUE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT__EXCEPTIONVALUE) &&
           verifier.VerifyString(_exceptionValue()) &&
           verifier.EndTable();
  }
};

struct DetailedException2Builder {
  typedef DetailedException2 Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add__exceptionValue(::flatbuffers::Offset<::flatbuffers::String> _exceptionValue) {
    fbb_.AddOffset(DetailedException2::VT__EXCEPTIONVALUE, _exceptionValue);
  }
  explicit DetailedException2Builder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<DetailedException2> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<DetailedException2>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<DetailedException2> CreateDetailedException2(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> _exceptionValue = 0) {
  DetailedException2Builder builder_(_fbb);
  builder_.add__exceptionValue(_exceptionValue);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<DetailedException2> CreateDetailedException2Direct(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *_exceptionValue = nullptr) {
  auto _exceptionValue__ = _exceptionValue ? _fbb.CreateString(_exceptionValue) : 0;
  return OMTLS::FlatBuffers::CreateDetailedException2(
      _fbb,
      _exceptionValue__);
}

}  // namespace FlatBuffers
}  // namespace OMTLS

#endif  // FLATBUFFERS_GENERATED_STRUCTANDTABLE_OMTLS_FLATBUFFERS_H_
