// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace OMTLS.FlatBuffers
{

using global::System;
using global::FlatBuffers;

public enum OverallLikelyExceptionUnion : byte
{
 NONE = 0,
 DetailedException1 = 1,
 DetailedException2 = 2,
};

public struct DetailedException1 : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static DetailedException1 GetRootAsDetailedException1(ByteBuffer _bb) { return GetRootAsDetailedException1(_bb, new DetailedException1()); }
  public static DetailedException1 GetRootAsDetailedException1(ByteBuffer _bb, DetailedException1 obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public DetailedException1 __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ulong _exceptionValue { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }

  public static Offset<DetailedException1> CreateDetailedException1(FlatBufferBuilder builder,
      ulong _exceptionValue = 0) {
    builder.StartObject(1);
    DetailedException1.Add_exceptionValue(builder, _exceptionValue);
    return DetailedException1.EndDetailedException1(builder);
  }

  public static void StartDetailedException1(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void Add_exceptionValue(FlatBufferBuilder builder, ulong ExceptionValue) { builder.AddUlong(0, ExceptionValue, 0); }
  public static Offset<DetailedException1> EndDetailedException1(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<DetailedException1>(o);
  }
};

public struct DetailedException2 : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static DetailedException2 GetRootAsDetailedException2(ByteBuffer _bb) { return GetRootAsDetailedException2(_bb, new DetailedException2()); }
  public static DetailedException2 GetRootAsDetailedException2(ByteBuffer _bb, DetailedException2 obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public DetailedException2 __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string _exceptionValue { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> Get_exceptionValueBytes() { return __p.__vector_as_span(4); }
#else
  public ArraySegment<byte>? Get_exceptionValueBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] Get_exceptionValueArray() { return __p.__vector_as_array<byte>(4); }

  public static Offset<DetailedException2> CreateDetailedException2(FlatBufferBuilder builder,
      StringOffset _exceptionValueOffset = default(StringOffset)) {
    builder.StartObject(1);
    DetailedException2.Add_exceptionValue(builder, _exceptionValueOffset);
    return DetailedException2.EndDetailedException2(builder);
  }

  public static void StartDetailedException2(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void Add_exceptionValue(FlatBufferBuilder builder, StringOffset ExceptionValueOffset) { builder.AddOffset(0, ExceptionValueOffset.Value, 0); }
  public static Offset<DetailedException2> EndDetailedException2(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<DetailedException2>(o);
  }
};


}
